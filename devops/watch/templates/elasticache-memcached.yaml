---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: ElastiCache memcached'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Parent Stacks'
        Parameters:
          - ParentVPCStack
          - ParentZoneStack
          - ParentSSHBastionStack
          - ParentAlertStack
          - ParentClientStack1
          - ParentClientStack2
          - ParentClientStack3
      - Label:
          default: 'ElastiCache Parameters'
        Parameters:
          - EngineVersion
          - CacheNodeType
          - NumCacheNodes
          - SubDomainNameWithDot
          - DNSRecordWeight
          - SubnetsReach
      - Label:
          default: 'Alarm Parameters'
        Parameters:
          - CPUUtilizationAlarmThreshold
          - CPUUtilizationAlarmPeriod
          - CPUUtilizationAlarmEvaluationPeriods
          - SwapUsageAlarmThreshold
          - SwapUsageAlarmPeriod
          - SwapUsageAlarmEvaluationPeriods
          - EvictionsAlarmThreshold
          - EvictionsAlarmPeriod
          - EvictionsAlarmEvaluationPeriods
      - Label:
          default: 'Operational Parameters'
        Parameters:
          - LogsRetentionInDays
      - Label:
          default: 'Permission Parameters'
        Parameters:
          - PermissionsBoundary
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/vpc-zone-*.yaml template.'
    Type: String
    Default: ''
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-*-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentClientStack1:
    Description: 'Required stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
  ParentClientStack2:
    Description: 'Optional stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
    Default: ''
  ParentClientStack3:
    Description: 'Optional stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
    Default: ''
  EngineVersion:
    Description: 'memcached version'
    Type: String
    Default: '1.6.22'
    AllowedValues:  # aws elasticache describe-cache-engine-versions --engine memcached --query "CacheEngineVersions[].EngineVersion"
      - '1.6.22'
      - '1.6.17'
  CacheNodeType:
    Description: 'The compute and memory capacity of the nodes in the node group (shard).'
    Type: 'String'
    Default: 'cache.t3.micro'
  NumCacheNodes:
    Description: 'The initial number of cache nodes that the cluster has.'
    Type: 'Number'
    Default: 1
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ?{SubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: 'memcached.'
  DNSRecordWeight:
    Description: 'DNS Record Weight (0 - no traffic, 50 - 50% traffic, assuming total 100 for all DNS entries)'
    Type: Number
    MinValue: 0
    MaxValue: 255
    Default: 50
  SubnetsReach:
    Description: 'Should this ElastiCache have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Private
    AllowedValues:
      - Public
      - Private
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
  CPUUtilizationAlarmThreshold:
    Description: 'Threshold for CPU Utilization Alarm.'
    Type: Number
    Default: 90
  CPUUtilizationAlarmPeriod:
    Description: 'Period for CPU Utilization Alarm.'
    Type: Number
    Default: 60
  CPUUtilizationAlarmEvaluationPeriods:
    Description: 'Evaluation periods for CPU Utilization Alarm.'
    Type: Number
    Default: 5
  SwapUsageAlarmThreshold:
    Description: 'Threshold for Swap Memory Usage Alarm.'
    Type: Number
    Default: 268435456  # 256 Megabyte in Byte
  SwapUsageAlarmPeriod:
    Description: 'Period for Swap Memory Usage Alarm.'
    Type: Number
    Default: 60
  SwapUsageAlarmEvaluationPeriods:
    Description: 'Evaluation periods for Swap Memory Usage Alarm.'
    Type: Number
    Default: 5
  EvictionsAlarmThreshold:
    Description: 'Threshold for Evictions Usage Alarm.'
    Type: Number
    Default: 1000
  EvictionsAlarmPeriod:
    Description: 'Period for Evictions Usage Alarm.'
    Type: Number
    Default: 60
  EvictionsAlarmEvaluationPeriods:
    Description: 'Evaluation periods for Evictions Usage Alarm.'
    Type: Number
    Default: 5
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Mappings:
  EngineVersionMap:
    '1.6.22':
      CacheParameterGroupFamily: 'memcached1.6'
    '1.6.17':
      CacheParameterGroupFamily: 'memcached1.6'
Conditions:
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasClientSecurityGroup1: !Not [!Equals [!Ref ParentClientStack1, '']]
  HasClientSecurityGroup2: !Not [!Equals [!Ref ParentClientStack2, '']]
  HasClientSecurityGroup3: !Not [!Equals [!Ref ParentClientStack3, '']]
  HasSingleCacheNode: !Equals [!Ref NumCacheNodes, '1']
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
Resources:
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      SetIdentifier: !Sub '${AWS::AccountId}:${AWS::Region}:${AWS::StackName}'
      Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: CNAME
      ResourceRecords:
        - !GetAtt 'CacheCluster1.ConfigurationEndpoint.Address'
      TTL: '60'
      Weight: !Ref DNSRecordWeight
  CacheParameterGroup:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: !FindInMap [EngineVersionMap, !Ref EngineVersion, CacheParameterGroupFamily]
      Description: !Ref 'AWS::StackName'
      Properties: {}
  CacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-Subnets${SubnetsReach}'}]
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  SecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup1
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack1}-SecurityGroupId'}
  SecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup2
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack2}-SecurityGroupId'}
  SecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup3
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack3}-SecurityGroupId'}
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroupId'}
  CacheCluster1:
    #  DeletionPolicy: Snapshot # Snapshot not supported by memcached (only Redis)
    #  UpdateReplacePolicy: Snapshot # Snapshot not supported by memcached (only Redis)
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AZMode: !If [HasSingleCacheNode, 'single-az', 'cross-az']
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref CacheParameterGroup
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: memcached
      EngineVersion: !Ref EngineVersion
      # NetworkType: dual_stack
      NotificationTopicArn: !If [HasAlertTopic, {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}, !Ref 'AWS::NoValue']
      NumCacheNodes: !Ref NumCacheNodes
      PreferredAvailabilityZones: !Split [',', !GetAtt 'PreferredAvailabilityZonesSelector.PreferredAvailabilityZones']
      PreferredMaintenanceWindow: 'sun:07:00-sun:08:00'
      VpcSecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
  ClusterCPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'Average CPU utilization of the memcache cluster exceeds ${CPUUtilizationAlarmThreshold}%'
      Namespace: 'AWS/ElastiCache'
      MetricName: CPUUtilization
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref CacheCluster1
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref CPUUtilizationAlarmThreshold
      Period: !Ref CPUUtilizationAlarmPeriod
      EvaluationPeriods: !Ref CPUUtilizationAlarmEvaluationPeriods
      AlarmActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      OKActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  ClusterSwapUsageTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'Average swap usage of the memcache cluster exceeds ${SwapUsageAlarmThreshold} bytes'
      Namespace: 'AWS/ElastiCache'
      MetricName: SwapUsage
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref CacheCluster1
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref SwapUsageAlarmThreshold
      Period: !Ref SwapUsageAlarmPeriod
      EvaluationPeriods: !Ref SwapUsageAlarmEvaluationPeriods
      AlarmActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      OKActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  ClusterEvictionsTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'Average evictions of the memcache cluster exceeds ${EvictionsAlarmThreshold}'
      Namespace: 'AWS/ElastiCache'
      MetricName: Evictions
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref CacheCluster1
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref EvictionsAlarmThreshold
      Period: !Ref EvictionsAlarmPeriod
      EvaluationPeriods: !Ref EvictionsAlarmEvaluationPeriods
      AlarmActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      OKActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  CustomResourceLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
  CustomResourceLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
        - !Ref CustomResourceLambdaRole
      PolicyName: lambda
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !GetAtt 'CustomResourceLambdaLogGroup.Arn'
  CustomResourceLambdaFunction:  # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          exports.handler = (event, context, cb) => {
            const nodes = parseInt(event.ResourceProperties.NumCacheNodes, 10);
            const azs = event.ResourceProperties.AvailabilityZones.split(',');
            const preferredAZs = Array(nodes).fill('').map((v, i) => azs[i % azs.length]);
            response.send(event, context, response.SUCCESS, {
              PreferredAvailabilityZones: preferredAZs.join(',')
            });
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'CustomResourceLambdaRole.Arn'
      Runtime: 'nodejs20.x'
      Timeout: 60
  CustomResourceLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CustomResourceLambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  PreferredAvailabilityZonesSelector:
    Type: 'Custom::PreferredAvailabilityZonesSelector'
    DependsOn:
      - CustomResourceLambdaLogGroup
      - CustomResourceLambdaPolicy
    Version: '1.0'
    Properties:
      NumCacheNodes: !Ref NumCacheNodes
      AvailabilityZones: !Join [',', !GetAZs '']
      ServiceToken: !GetAtt 'CustomResourceLambdaFunction.Arn'
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref 'AWS::StackName'
      DashboardBody: !Sub |
        { "widgets": [ { "type": "metric", "x": 0, "y": 0, "width": 6,
        "height": 6, "properties": { "metrics": [ [ "AWS/ElastiCache",
        "CPUUtilization", "CacheClusterId", "${CacheCluster1}" ] ], "view":
        "timeSeries", "stacked": false, "region": "${AWS::Region}", "stat":
        "Average", "period": 1, "title": "CPUUtilization", "yAxis": {
        "left": { "min": 0, "max": 100, "showUnits": false } }, "liveData":
        false, "annotations": { "horizontal": [ { "value":
        ${CPUUtilizationAlarmThreshold} } ] } } }, { "type": "metric", "x":
        0, "y": 6, "width": 6, "height": 6, "properties": { "metrics": [ [
        "AWS/ElastiCache", "Evictions", "CacheClusterId", "${CacheCluster1}"
        ] ], "view": "timeSeries", "stacked": false, "region":
        "${AWS::Region}", "stat": "Average", "period": 1, "title":
        "Evictions", "annotations": { "horizontal": [ { "value":
        ${EvictionsAlarmThreshold} } ] } } }, { "type": "metric", "x": 18,
        "y": 0, "width": 6, "height": 6, "properties": { "metrics": [ [
        "AWS/ElastiCache", "CurrConnections", "CacheClusterId",
        "${CacheCluster1}", { "yAxis": "left" } ], [ ".", "NewConnections",
        ".", "." ] ], "view": "timeSeries", "stacked": false, "region":
        "${AWS::Region}", "stat": "Average", "period": 1, "title":
        "Connections" } }, { "type": "metric", "x": 12, "y": 0, "width": 6,
        "height": 6, "properties": { "metrics": [ [ "AWS/ElastiCache",
        "NetworkBytesOut", "CacheClusterId", "${CacheCluster1}" ], [ ".",
        "NetworkBytesIn", ".", "." ] ], "view": "timeSeries", "stacked":
        false, "region": "${AWS::Region}", "stat": "Average", "period": 1,
        "title": "Network" } }, { "type": "metric", "x": 12, "y": 6,
        "width": 6, "height": 6, "properties": { "metrics": [ [ {
        "expression": "(m1/(m1+m2))*100.0", "label": "CacheHitRate", "id":
        "e1", "yAxis": "left", "region": "${AWS::Region}" } ], [
        "AWS/ElastiCache", "GetHits", "CacheClusterId", "${CacheCluster1}",
        { "id": "m1", "visible": false } ], [ ".", "GetMisses", ".", ".", {
        "id": "m2", "visible": false } ] ], "view": "timeSeries",
        "stacked": false, "region": "${AWS::Region}", "stat": "Sum",
        "period": 1, "title": "CacheHitRate", "yAxis": { "left": { "min":
        0, "max": 100 } }, "annotations": { "horizontal": [ { "value": 80 }
        ] } } }, { "type": "metric", "x": 6, "y": 6, "width": 6, "height":
        6, "properties": { "metrics": [ [ "AWS/ElastiCache", "CurrItems",
        "CacheClusterId", "${CacheCluster1}" ] ], "view": "timeSeries",
        "stacked": false, "region": "${AWS::Region}", "stat": "Average",
        "period": 1, "title": "CurrItems", "yAxis": { "left": { "min": 0 }
        } } }, { "type": "metric", "x": 18, "y": 6, "width": 6, "height":
        6, "properties": { "metrics": [ [ "AWS/ElastiCache", "CmdSet",
        "CacheClusterId", "${CacheCluster1}", { "yAxis": "left" } ], [ ".",
        "CmdGet", ".", "." ] ], "view": "timeSeries", "stacked": false,
        "region": "${AWS::Region}", "stat": "Average", "period": 1,
        "title": "Read/Write" } }, { "type": "metric", "x": 6, "y": 0,
        "width": 6, "height": 6, "properties": { "metrics": [ [
        "AWS/ElastiCache", "SwapUsage", "CacheClusterId",
        "${CacheCluster1}", { "yAxis": "left", "color": "#d62728" } ] ],
        "view": "timeSeries", "stacked": false, "region": "${AWS::Region}",
        "stat": "Average", "period": 1, "title": "SwapUsage",
        "annotations": { "horizontal": [ { "value":
        ${SwapUsageAlarmThreshold} } ] } } } ] }
Outputs:
  TemplateID:
    Description: 'Template Id.'
    Value: 'state/elasticache-memcached.yaml'
  TemplateVersion:
    Description: 'Template Version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  ClusterName:
    Description: 'The name of the cluster'
    Value: !Ref CacheCluster1
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  DNSName:
    Description: 'The DNS address of the configuration endpoint for the Memcached cache cluster.'
    Value: !GetAtt 'CacheCluster1.ConfigurationEndpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  DashboardUrl:
    Description: 'The URL of the CloudWatch Dashboard'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardUrl'
