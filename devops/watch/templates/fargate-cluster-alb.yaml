---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fargate: cluster w/ ALB'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Parent Stacks'
        Parameters:
          - ParentVPCStack
          - ParentAuthProxyStack
          - ParentAlertStack
          - ParentZoneStack
          - ParentS3StackAccessLog
          - ParentClientStack1
          - ParentClientStack2
          - ParentClientStack3
          - ParentWAFStack
      - Label:
          default: 'Load Balancer Parameters'
        Parameters:
          - LoadBalancerScheme
          - LoadBalancerCertificateArn
          - LoadBalancerIdleTimeout
          - LoadBalancerDeletionProtection
          - SubDomainNameWithDot
          - DNSRecordWeight
      - Label:
          default: 'Monitoring Parameters'
        Parameters:
          - HTTPCodeELB5XXTooHighAlarmThreshold
          - HTTPCodeELB5XXTooHighAlarmPeriod
          - HTTPCodeELB5XXTooHighAlarmEvaluationPeriods
          - RejectedConnectionCountTooHighAlarmThreshold
          - RejectedConnectionCountTooHighAlarmPeriod
          - RejectedConnectionCountTooHighAlarmEvaluationPeriods
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentAuthProxyStack:
    Description: 'Optional stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  ParentS3StackAccessLog:
    Description: 'Optional stack name of parent s3 stack based on state/s3.yaml template (with Access set to ElbAccessLogWrite) to store access logs.'
    Type: String
    Default: ''
  ParentClientStack1:
    Description: 'Optional stack name of parent Security Group stack based on base/client-sg.yaml template to allow network access to the ALB.'
    Type: String
    Default: ''
  ParentClientStack2:
    Description: 'Optional stack name of parent Security Group stack based on base/client-sg.yaml template to allow network access to the ALB.'
    Type: String
    Default: ''
  ParentClientStack3:
    Description: 'Optional stack name of parent Security Group stack based on base/client-sg.yaml template to allow network access to the ALB.'
    Type: String
    Default: ''
  ParentWAFStack:
    Description: 'Optional stack name of parent WAF stack based on the security/waf.yaml template.'
    Type: String
    Default: ''
  LoadBalancerScheme:
    Description: 'Indicates whether the load balancer in front of the ECS cluster is internet-facing or internal.'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
      - 'internet-facing'
      - 'internal'
  # LoadBalancerCertificateArn:
  #   Description: 'Optional Amazon Resource Name (ARN) of the certificate to associate with the load balancer. If set, HTTP requests are redirected to HTTPS.'
  #   Type: String
  #   Default: ''
  LoadBalancerCertificateArn:
    Description: 'Required Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'
    Type: String
  LoadBalancerIdleTimeout:
    Description: 'The idle timeout value, in seconds.'
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 4000
  LoadBalancerDeletionProtection:
    Description: 'Indicates whether the load balancer deletion protection is enabled.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ?{SubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: ''
  DNSRecordWeight:
    Description: 'DNS Record Weight (0 - no traffic, 50 - 50% traffic, assuming total 100 for all DNS entries)'
    Type: Number
    MinValue: 0
    MaxValue: 255
    Default: 50
  HTTPCodeELB5XXTooHighAlarmThreshold:
    Description: 'Threshold for HTTPCodeELB5XXTooHighAlarm'
    Type: Number
    Default: 100
  HTTPCodeELB5XXTooHighAlarmPeriod:
    Description: 'Period for HTTPCodeELB5XXTooHighAlarm'
    Type: Number
    Default: 60
  HTTPCodeELB5XXTooHighAlarmEvaluationPeriods:
    Description: 'EvaluationPeriods for HTTPCodeELB5XXTooHighAlarm'
    Type: Number
    Default: 5
  RejectedConnectionCountTooHighAlarmThreshold:
    Description: 'Threshold for RejectedConnectionCountTooHighAlarm'
    Type: Number
    Default: 100
  RejectedConnectionCountTooHighAlarmPeriod:
    Description: 'Period for RejectedConnectionCountTooHighAlarm'
    Type: Number
    Default: 60
  RejectedConnectionCountTooHighAlarmEvaluationPeriods:
    Description: 'EvaluationPeriods for RejectedConnectionCountTooHighAlarm'
    Type: Number
    Default: 5
Conditions:
  HasAuthProxySecurityGroup: !Not [!Equals [!Ref ParentAuthProxyStack, '']]
  # HasNotAuthProxySecurityGroup: !Equals [!Ref ParentAuthProxyStack, '']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasS3Bucket: !Not [!Equals [!Ref ParentS3StackAccessLog, '']]
  HasClientSecurityGroup1: !Not [!Equals [!Ref ParentClientStack1, '']]
  HasClientSecurityGroup2: !Not [!Equals [!Ref ParentClientStack2, '']]
  HasClientSecurityGroup3: !Not [!Equals [!Ref ParentClientStack3, '']]
  HasWAF: !Not [!Equals [!Ref ParentWAFStack, '']]
  HasLoadBalancerDirectAccess: !Not [!Or [!Condition HasClientSecurityGroup1, !Condition HasClientSecurityGroup2, !Condition HasClientSecurityGroup3]]
  HasLoadBalancerSchemeInternal: !Equals [!Ref LoadBalancerScheme, 'internal']
  HasLoadBalancerCertificateArn: !Not [!Equals [!Ref LoadBalancerCertificateArn, '']]
  HasAuthProxySecurityGroupAndLoadBalancerCertificateArn: !And [!Condition HasAuthProxySecurityGroup, !Condition HasLoadBalancerCertificateArn]
  # HTTPS Only HasNotAuthProxySecurityGroupAndLoadBalancerCertificateArn: !And [!Condition HasNotAuthProxySecurityGroup, !Condition HasLoadBalancerCertificateArn]
Resources:
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  ClusterCapacityProviderAssociations:
    Type: 'AWS::ECS::ClusterCapacityProviderAssociations'
    Properties:
      Cluster: !Ref Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-load-balancer'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  # LoadBalancerSecurityGroupInHttpFromWorld4:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Condition: HasNotAuthProxySecurityGroup
  #   Properties:
  #     GroupId: !Ref LoadBalancerSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 80
  #     ToPort: 80
  #     CidrIp: '0.0.0.0/0'
  # LoadBalancerSecurityGroupInHttpFromWorld6:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Condition: HasNotAuthProxySecurityGroup
  #   Properties:
  #     GroupId: !Ref LoadBalancerSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: 80
  #     ToPort: 80
  #     CidrIpv6: '::/0'
  LoadBalancerSecurityGroupInHttpsFromWorld4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    # HTTPS Only Condition: HasNotAuthProxySecurityGroupAndLoadBalancerCertificateArn
    Condition: HasLoadBalancerDirectAccess
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
  LoadBalancerSecurityGroupInHttpsFromWorld6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    # HTTPS Only Condition: HasNotAuthProxySecurityGroupAndLoadBalancerCertificateArn
    Condition: HasLoadBalancerDirectAccess
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIpv6: '::/0'
  LoadBalancerSecurityGroupInFromClientStack1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup1
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack1}-SecurityGroupId'}
      Description: !Sub '${ParentClientStack1}'
  LoadBalancerSecurityGroupInFromClientStack2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup2
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack2}-SecurityGroupId'}
      Description: !Sub '${ParentClientStack2}'
  LoadBalancerSecurityGroupInFromClientStack3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasClientSecurityGroup3
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack3}-SecurityGroupId'}
      Description: !Sub '${ParentClientStack3}'
  LoadBalancerSecurityGroupInHttpFromAuthProxy:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasAuthProxySecurityGroup
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-SecurityGroupId'}
      Description: {'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-StackName'}
  LoadBalancerSecurityGroupInHttpsFromAuthProxy:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasAuthProxySecurityGroupAndLoadBalancerCertificateArn
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-SecurityGroupId'}
      Description: {'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-StackName'}
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    # checkov:skip=CKV_AWS_91:Ensure the ELBv2 (Application/Network) has access logging enabled
    Properties:
      Type: application
      Scheme: !Ref LoadBalancerScheme
      IpAddressType: 'dualstack'
      LoadBalancerAttributes:
        - Key: 'routing.http.drop_invalid_header_fields.enabled'
          Value: 'true'
        - Key: 'routing.http2.enabled'
          Value: 'true'
        - Key: 'idle_timeout.timeout_seconds'
          Value: !Ref LoadBalancerIdleTimeout
        - Key: 'deletion_protection.enabled'
          Value: !Ref LoadBalancerDeletionProtection
        - Key: 'access_logs.s3.enabled'
          Value: !If [HasS3Bucket, 'true', 'false']
        - !If [HasS3Bucket, {Key: 'access_logs.s3.prefix', Value: !Ref 'AWS::NoValue'}, !Ref 'AWS::NoValue']
        - !If [HasS3Bucket, {Key: 'access_logs.s3.bucket', Value: {'Fn::ImportValue': !Sub '${ParentS3StackAccessLog}-BucketName'}}, !Ref 'AWS::NoValue']
      Subnets: !If
        - HasLoadBalancerSchemeInternal
        - !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPrivate'}]
        - !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPublic'}]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
        - !If [HasClientSecurityGroup1, {'Fn::ImportValue': !Sub '${ParentClientStack1}-SecurityGroupId'}, !Ref 'AWS::NoValue']
        - !If [HasClientSecurityGroup2, {'Fn::ImportValue': !Sub '${ParentClientStack2}-SecurityGroupId'}, !Ref 'AWS::NoValue']
        - !If [HasClientSecurityGroup3, {'Fn::ImportValue': !Sub '${ParentClientStack3}-SecurityGroupId'}, !Ref 'AWS::NoValue']
  WebACLAssociation:
    Condition: HasWAF
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLArn: {'Fn::ImportValue': !Sub '${ParentWAFStack}-WebACL'}
  # HttpListener:
  #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #   Properties:
  #     DefaultActions:
  #       - !If
  #         - HasLoadBalancerCertificateArn
  #         - RedirectConfig:
  #             Port: '443'
  #             Protocol: HTTPS
  #             StatusCode: 'HTTP_301'
  #           Type: redirect
  #         - FixedResponseConfig:
  #             ContentType: 'text/plain'
  #             MessageBody: default
  #             StatusCode: '404'
  #           Type: 'fixed-response'
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  HttpsListener:
    Condition: HasLoadBalancerCertificateArn
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificateArn
      DefaultActions:
        - FixedResponseConfig:
            ContentType: 'text/plain'
            MessageBody: default
            StatusCode: '404'
          Type: 'fixed-response'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  RecordSetGroup:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
        - Type: A
          SetIdentifier: !Sub '${AWS::AccountId}:${AWS::Region}:${AWS::StackName}'
          Name: !Sub
            - '${SubDomainNameWithDot}${HostedZoneName}'
            - SubDomainNameWithDot: !Ref SubDomainNameWithDot
              HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt 'LoadBalancer.DNSName'
            EvaluateTargetHealth: 'true'
          Weight: !Ref DNSRecordWeight
        - Type: AAAA
          SetIdentifier: !Sub '${AWS::AccountId}:${AWS::Region}:${AWS::StackName}'
          Name: !Sub
            - '${SubDomainNameWithDot}${HostedZoneName}'
            - SubDomainNameWithDot: !Ref SubDomainNameWithDot
              HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt 'LoadBalancer.DNSName'
            EvaluateTargetHealth: 'true'
          Weight: !Ref DNSRecordWeight
  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: !Ref HTTPCodeELB5XXTooHighAlarmPeriod
      EvaluationPeriods: !Ref HTTPCodeELB5XXTooHighAlarmEvaluationPeriods
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref HTTPCodeELB5XXTooHighAlarmThreshold
      AlarmActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      OKActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 'LoadBalancer.LoadBalancerFullName'
      TreatMissingData: notBreaching
  RejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: !Ref RejectedConnectionCountTooHighAlarmPeriod
      EvaluationPeriods: !Ref RejectedConnectionCountTooHighAlarmEvaluationPeriods
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref RejectedConnectionCountTooHighAlarmThreshold
      AlarmActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      OKActions:
        - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 'LoadBalancer.LoadBalancerFullName'
      TreatMissingData: notBreaching
Outputs:
  TemplateID:
    Description: 'Template Id.'
    Value: 'base/fargate-cluster-alb.yaml'
  TemplateVersion:
    Description: 'Template Version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  Cluster:
    Description: 'Fargate cluster name.'
    Value: !Ref Cluster
    Export:
      Name: !Sub '${AWS::StackName}-Cluster'
  ClusterArn:
    Description: 'Fargate cluster arn.'
    Value: !GetAtt Cluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'
  LoadBalancerFullName:
    Description: 'ALB full name for services.'
    Value: !GetAtt 'LoadBalancer.LoadBalancerFullName'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerFullName'
  LoadBalancerSecurityGroup:
    Description: 'The Security Group of the Load Balancer.'
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerSecurityGroup'
  # HttpListener:
  #   Description: 'ALB HTTP listener for services.'
  #   Value: !Ref HttpListener
  #   Export:
  #     Name: !Sub '${AWS::StackName}-HttpListener'
  HttpsListener:
    Condition: HasLoadBalancerCertificateArn
    Description: 'ALB HTTPS listener for services.'
    Value: !Ref HttpsListener
    Export:
      Name: !Sub '${AWS::StackName}-HttpsListener'
  CanonicalHostedZoneID:
    Description: 'The ID of the Amazon Route 53 hosted zone associated with the load balancer.'
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-CanonicalHostedZoneID'
  DNSName:
    Description: 'The DNS name for the ECS cluster load balancer.'
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS cluster.'
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
